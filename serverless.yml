service: lambda-caleuche

provider:
  name: aws
  runtime: nodejs8.10
  stage: develop
  region: us-west-2
  iamRoleStatements:
    - Effect: Allow
      Action:
      - KMS:Decrypt
      Resource: ${self:custom.kmsSecrets.keyArn}
    - Effect: Allow
      Action:
      - s3:*
      Resource: 'arn:aws:s3:::*'

  environment:
      SECRETS: ${self:custom.kmsSecrets.secrets.SECRETS}

plugins:
  - serverless-kms-secrets
  - serverless-offline
  - serverless-api-compression

# Enable auto-packing of external modules
custom:
  webpackIncludeModules: true
  serverless-kms-secrets:
    secretsFile: kms-secrets.${opt:stage, self:provider.stage}.${opt:region, self:provider.region}.yml
  kmsSecrets: ${file(kms-secrets.${opt:stage, self:provider.stage}.${opt:region, self:provider.region}.yml)}
  contentCompression: 1024

functions:

  event_post:
    handler: src/api_handler.event_post
    description: Send a new event
    events:
      - http:
         path: v1/event #legacy
         method: post
         cors: true
      - http:
         path: event
         method: post
         cors: true

  event_delete:
    handler: src/api_handler.event_delete
    description: Delete an event
    events:
      - http:
          path: event/{id}
          method: delete
          cors: true
          request:
            parameters:
              paths:
                id: true
      - http:
          path: event
          method: delete
          cors: true


  event_get:
    handler: src/api_handler.event_get
    description: Get an event, a paginated subset or all of the events belonging to an user
    timeout: 30
    events:
      - http:
         path: event/{id}
         method: get
         cors: true
         request:
            parameters:
              paths:
                id: true
      - http:
         path: v1/event/{id} #legacy
         method: get
         cors: true
         request:
            parameters:
              paths:
                id: true
      - http:
         path: event
         method: get
         cors: true
         request:
           template:
             application/json: >
               {
                 "page" : "$input.params(''page'')",
                 "per_page": "$input.params(''per_page'')"
               }
      - http:
         path: v1/event #legacy
         method: get
         cors: true
         request:
           template:
             application/json: >
               {
                 "page" : "$input.params(''page'')",
                 "per_page": "$input.params(''per_page'')"
               }
